class Finite_Automata:
    # Constructor method for initializing a finite automaton with a given grammar
    def __init__(self, grammar):
        self.alphabet = {}  # Initialize the set of input symbols
        self.state = {}  # Initialize the set of states
        self.transition = {}  # Initialize the state transition function
        self.init_state = None  # Initialize the initial state
        self.final_state = {}  # Initialize the set of final (accepting) states

        self.convert_grammar(grammar)  # Convert the provided grammar into a finite automaton

    # Method to convert context-free grammar into finite automaton
    def convert_grammar(self, grammar):
        self.alphabet = grammar.VT  # Set of terminal symbols in the grammar
        self.state = grammar.VN  # Set of non-terminal symbols (considered as states)
        for symb in grammar.P:  # Iterate through production rules
            for product in grammar.P[symb]:  # Iterate through productions for a symbol
                if len(product) == 1:  # If production leads to a terminal symbol
                    self.transition[(symb, product)] = 'final'  # Mark as final state transition
                else:  # For productions that lead to non-terminal symbols
                    self.transition[(symb, product[0])] = product[1]  # Create state transition

        self.init_state = 'S'  # Set initial state as 'S'
        self.final_state = {symb for symb in grammar.P if symb.isupper()}  # Set of non-terminal symbols as final states

    # Method to check if the input string can be generated by the automaton
    def check(self, input_string):
        current_state = self.init_state  # Start at the initial state
        for char in input_string:  # Iterate through characters in input string
            if not (current_state, char) in self.transition:  # If no transition exists for current state and character
                return False  # Input string cannot be generated
            current_state = self.transition[(current_state, char)]  # Move to the next state

        return True  # Input string can be generated
